#!/usr/bin/env bash
#### Smartpad Specific Tweaks for armbian images
####
#### Written by Stephan Wendel aka KwadFan <me@stephanwe.de>
#### Copyright 2023 - till today
#### https://github.com/KwadFan
####
#### This File is distributed under GPLv3
####

# shellcheck enable=require-variable-braces
# Source error handling, leave this in place
set -Ee

# Source CustomPIOS common.sh
# shellcheck disable=SC1091
source /common.sh
install_cleanup_trap

### Helper func
is_board_type() {
    local board releasefile
    board=""
    releasefile="/etc/armbian-release"
    if [[ -f "${releasefile}" ]]; then
        board="$(grep "BOARD=" "${releasefile}" | cut -d'=' -f2)"
    fi
    echo "${board}"
}
[[ -n "${BASE_USER}" ]] || BASE_USER="pi"  # Remplacez "pi" par l'utilisateur principal si nécessaire
#[[ -n "$BASE_USER" ]] || BASE_USER="pi"  # Remplacez "pi" par l'utilisateur principal si nécessaire

if ! command -v git &>/dev/null; then
    echo "Git n'est pas installé, veuillez l'installer avant de continuer."
    exit 1
fi


echo_green "Apply SmartPad specific patches..."
unpack /filesystem/root /
if [[ -f /etc/X11/xorg.conf.d/03-smartpad-rotate-touch.conf ]]; then
    rm -fv /etc/X11/xorg.conf.d/03-smartpad-rotate-touch.conf
fi

echo_green "Apply SmartPad specific patches... [DONE]"


### Enable Serial and SPI connections by default
if [[ "$(is_board_type)" == "smartpad" ]]; then
    echo_green "Enable Serial and SPI interface on SmartPad..."
    echo "overlays=spi-spidev uart1 uart2" >> "${SMARTPAD_CONFIG_TXT_FILE}"
    echo "param_spidev_spi_bus=1" >> "${SMARTPAD_CONFIG_TXT_FILE}"
    echo_green "Enable Serial and SPI interface on SmartPad... DONE!"
fi

### Install plymouth theme and install yumi Plymouth repository
echo_green "Install Yumi Lab Plymouth theme on SmartPad..."

smartpad_install_theme() {
    local src dest
    dest="/usr/share/plymouth/themes/"
    src="/home/${BASE_USER}/$(basename "${SMARTPAD_PLYMOUTH_REPO/.git/}")"
    src="${src}/pack_2/hexagon_alt"
    if [[ -d "${src}" ]]; then
        sudo cp -vr "${src}" "${dest}"
    fi
    echo_green "Set default theme to ${SMARTPAD_PLYMOUTH_THEME} ..."
    sudo plymouth-set-default-theme "${SMARTPAD_PLYMOUTH_THEME}"

    if [[ -d "${src}" ]]; then
    echo "Clonage réussi et thème disponible pour installation."
else
    echo "Erreur: Thème Plymouth introuvable après clonage."
    exit 1
fi

}

pushd "/home/${BASE_USER}" &>/dev/null
sudo -u "${BASE_USER}" git clone "${SMARTPAD_PLYMOUTH_REPO}"
smartpad_install_theme
popd &>/dev/null

echo_green "Install Yumi Lab Plymouth theme on SmartPad... [DONE]"

# echo_green "Install YUMI_SYNC ..."
# pushd "/home/${BASE_USER}" &>/dev/null
# sudo -u "${BASE_USER}" git clone https://github.com/Yumi-Lab/YUMI_SYNC.git
# cd YUMI_SYNC
# sudo make install
# Pour YUMI_SYNC
#if [[ ! -x "$(command -v YUMI_SYNC)" ]]; then
#    echo "Erreur: YUMI_SYNC n’a pas été installé correctement."
#    exit 1
#fi

# cd ..
# popd &>/dev/null
# echo_green "Install YUMI_SYNC ... [DONE]"

echo_green "Install moonraker-yumi-lab ..."
pushd "/home/${BASE_USER}" &>/dev/null
unpack /filesystem/home/"${BASE_USER}" /home/"${BASE_USER}" "${BASE_USER}"
sudo -u "${BASE_USER}" git clone https://github.com/Yumi-Lab/moonraker-yumi-lab.git
cd moonraker-yumi-lab
chmod +x ./install.sh
sudo -u "${BASE_USER}" ./install.sh -C "/home/pi/printer_data/config/moonraker.conf"\
    -p 7125 -H 127.0.0.1 -l /home/pi/printer_data/logs \
    -L -S "https://app.yumi-lab.com"
cd ..
popd &>/dev/null
echo_green "Install moonraker-yumi-lab ... [DONE]"

echo_green "Install KlipperScreen preconfiguration..."
#unpack /filesystem/home/"${BASE_USER}" /home/"${BASE_USER}" "${BASE_USER}"

echo_green "Disable KlipperScreen for first boot service..."
systemctl_if_exists disable KlipperScreen.service

echo_green "Enable first boot service..."
sudo chmod +x /usr/local/bin/firstboot
systemctl_if_exists enable firstboot.service

echo_green "Install yumi-config smartpad_generic ..."
pushd "/home/${BASE_USER}" &>/dev/null
sudo -u "${BASE_USER}" git clone https://github.com/Yumi-Lab/yumi-config.git
cd yumi-config
chmod +x ./install.sh
./install.sh
cd ..
popd &>/dev/null
echo_green "Install yumi-config smartpad_generic ... [DONE]"

#echo_green "Install klipper's linux_host_mcu ..."
#if [[ -d "/home/${BASE_USER}/yumi-config" ]]; then
#    echo "Copying config ..."
#    cp -v "/home/${BASE_USER}/yumi-config/mcu_linux/smart-pi-one/linux_mcu.kconfig" \
#        "/home/${BASE_USER}/klipper/.config"
#    pushd "/home/${BASE_USER}/klipper" &>/dev/null
#    echo "Compile linux_mcu ..."
#    sudo -u "${BASE_USER}" make -j"$(nproc)"
#    echo "Install linux_mcu ..."
#    sudo -u "${BASE_USER}" make flash
#    echo "Cleanup ..."
#    sudo -u "${BASE_USER}" make clean
#    sudo -u "${BASE_USER}" make distclean
#    echo "Copy service file ..."
#    cp -v "/home/${BASE_USER}/klipper/scripts/klipper-mcu.service" \
#        "/etc/systemd/system"
#    echo "Enable klipper-mcu.service ..."
#    systemctl_if_exists enable klipper-mcu.service
#    echo_green "Install klipper's linux_host_mcu ... [DONE]"
#else
#    echo_red "WARNING! yumi-config repository not found! Abort install..."
#fi

echo "📌 Installation du Klipper Linux MCU avec un fichier précompilé..."

BASE_USER="pi"
KLIPPER_DIR="/home/${BASE_USER}/klipper"
YUMI_CONFIG_DIR="/home/${BASE_USER}/yumi-config"
MCU_CONFIG="${YUMI_CONFIG_DIR}/mcu_linux/smart-pi-one/linux_mcu.kconfig"
SERVICE_FILE="/etc/systemd/system/klipper-mcu.service"
PRECOMPILED_ELF="${YUMI_CONFIG_DIR}/mcu_linux/smart-pi-one/klipper.elf"


# Vérifie si le dossier de configuration yumi-config existe
if [[ -d "${YUMI_CONFIG_DIR}" ]]; then
    echo "✅ Copie du fichier de configuration..."
    cp -v "${MCU_CONFIG}" "${KLIPPER_DIR}/.config"

    # Accède au répertoire Klipper
    pushd "${KLIPPER_DIR}" &>/dev/null

    # Vérifie si un fichier ELF est fourni
    if [[ -f "${PRECOMPILED_ELF}" ]]; then
        echo "🔄 Utilisation du fichier .elf précompilé au lieu de recompiler..."

        echo "Creation out"
        mkdir -p "${KLIPPER_DIR}/out"
        echo "Permission"
        sudo chown -R "${BASE_USER}:${BASE_USER}" "${KLIPPER_DIR}/out"
        sudo chmod -R 775 "${KLIPPER_DIR}/out"
        echo "Copie elf"
        cp -v "${PRECOMPILED_ELF}" "${KLIPPER_DIR}/out/klipper.elf"
    else
        echo "🔨 Compilation du firmware Klipper Linux MCU..."
        sudo -u "${BASE_USER}" make -j"$(nproc)"
    fi

    echo "🚀 Installation du firmware..."
    sudo -u "${BASE_USER}" make flash

    echo "🧹 Nettoyage des fichiers temporaires..."
    sudo -u "${BASE_USER}" make clean
    sudo -u "${BASE_USER}" make distclean

    # Installation du service systemd
    echo "📂 Copie du fichier de service systemd..."
    sudo cp -v "${KLIPPER_DIR}/scripts/klipper-mcu.service" "${SERVICE_FILE}"

    echo "🔧 Activation et démarrage du service klipper-mcu..."
    sudo systemctl enable klipper-mcu.service
    sudo systemctl start klipper-mcu.service

    echo "👤 Ajout de l'utilisateur au groupe tty..."
    sudo usermod -a -G tty "${BASE_USER}"

    echo "✅ Installation du Klipper Linux MCU terminée avec succès !"

else
    echo "❌ Erreur : Le dossier yumi-config n'existe pas !"
    exit 1
fi

echo_green "Install YUMI_PLR ..."
pushd "/home/${BASE_USER}" &>/dev/null
sudo -u "${BASE_USER}" git clone https://github.com/Yumi-Lab/YUMI_PLR.git
cd YUMI_PLR
chmod +x ./install.sh
./install.sh
cd ..
# Pour YUMI_PLR
if [[ ! -d "/home/${BASE_USER}/YUMI_PLR" ]]; then
    echo "Erreur: YUMI_PLR n’a pas été installé correctement."
    exit 1
fi
popd &>/dev/null
echo_green "Install YUMI_PLR ... [DONE]"

echo_green "ACL printer_data ..."
sudo chmod 777 -R /home/pi/printer_data/
echo_green "ACL printer_data ... [DONE]"